import tkinter as tk
import pandas as pd
import pyperclip
import pyautogui
import json
import threading
import time
from pynput import mouse
from tkinter import messagebox

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
try:
    with open("users.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    df = pd.DataFrame(data)
except Exception as e:
    messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å users.json:\n{e}")
    exit()

fields_order = ["INPOL", "MOS", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞", "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"]
current_person = 0
current_field = 0
auto_mode = False

# GUI
root = tk.Tk()
root.title("–ö–ß–ü –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
root.geometry("340x360")
root.wm_attributes("-topmost", 1)
root.wm_attributes("-alpha", 0.9)

field_vars = {}
entry_widgets = {}

def update_display():
    for key in fields_order:
        entry_widgets[key].config(bg="white")
    if current_person < len(df):
        person = df.iloc[current_person]
        for key in fields_order:
            value = str(person.get(key, ""))
            field_vars[key].set(value)
        current_field_name = fields_order[current_field]
        current_value = str(person.get(current_field_name, ""))
        pyperclip.copy(current_value)
        entry_widgets[current_field_name].config(bg="lightgreen")
        print(f"[–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ] {current_field_name}: {current_value}")
    else:
        status_label.config(text="‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        auto_mode_off()

def advance():
    global current_field, current_person
    current_field += 1
    if current_field >= len(fields_order):
        current_field = 0
        current_person += 1
        if current_person >= len(df):
            print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            return
    update_display()

def start_auto_mode():
    global auto_mode
    auto_mode = True
    start_button.config(state="disabled")
    stop_button.config(state="normal")
    status_label.config(text="üîõ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    update_display()

def auto_mode_off():
    global auto_mode
    auto_mode = False
    start_button.config(state="normal")
    stop_button.config(state="disabled")
    status_label.config(text="‚è∏ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏
def on_click(x, y, button, pressed):
    if pressed and auto_mode and current_person < len(df):
        try:
            time.sleep(0.1)
            pyautogui.hotkey("ctrl", "v")
            threading.Timer(0.2, advance).start()
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏] {e}")

# –°–ª—É—à–∞—Ç–µ–ª—å –º—ã—à–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_mouse_listener():
    listener = mouse.Listener(on_click=on_click)
    listener.daemon = True
    listener.start()

threading.Thread(target=start_mouse_listener, daemon=True).start()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
for i, key in enumerate(fields_order):
    tk.Label(root, text=key).grid(row=i, column=0, sticky="w")
    var = tk.StringVar()
    entry = tk.Entry(root, textvariable=var, width=25)
    entry.grid(row=i, column=1)
    field_vars[key] = var
    entry_widgets[key] = entry

start_button = tk.Button(root, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=start_auto_mode, bg="lightgreen", font=("Arial", 10, "bold"))
start_button.grid(row=len(fields_order), column=0, pady=10)

stop_button = tk.Button(root, text="‚èπ –°—Ç–æ–ø", command=auto_mode_off, bg="tomato", font=("Arial", 10, "bold"), state="disabled")
stop_button.grid(row=len(fields_order), column=1, pady=10)

status_label = tk.Label(root, text="‚è∏ –û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞", font=("Arial", 9, "italic"))
status_label.grid(row=len(fields_order)+1, column=0, columnspan=2)

root.mainloop()
